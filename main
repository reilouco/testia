import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
import pickle
import os.path
import matplotlib.pyplot as plt
from talib import RSI, BBANDS, SLOPE, TRENDLINE

# Opções de ativos
assets = {
    "1": "EURUSD=X",
    "2": "GC=F",
    "3": "BTC-USD",
    "4": "^DJI",
    "5": "JPY=X"
}

# Selecionando ativo
print("Selecione um ativo:")
for key, value in assets.items():
    print(f"{key}: {value}")
selected_asset = input()

ticker = assets.get(selected_asset)
if not ticker:
    print("Ativo inválido.")
    exit()

# Baixando dados em tempo real
df = yf.download(ticker, interval="1m")

# Criando recursos
df["SMA_50"] = df["Close"].rolling(window=50).mean()
df["SMA_200"] = df["Close"].rolling(window=200).mean()
df["log_returns"] = np.log(df["Close"]) - np.log(df["Close"].shift(1))
df["price_diff"] = df["Close"].diff()
df["direction"] = np.where(df["price_diff"] > 0, 1, 0)
df["high_low_diff"] = df["High"] - df["Low"]
df["volume_diff"] = df["Volume"].diff()
df["volatility"] = df["Close"].rolling(window=50).std()
df['rsi'] = RSI(df)

# Adicionando Fibonacci
df['Fib38.2'] = df['Close'].rolling(window=21).apply(lambda x: (x.max() - x.min()) * 0.382 + x.min(), raw=False)
df['Fib50'] = df['Close'].rolling(window=21).apply(lambda x: (x.max() - x.min()) * 0.5 + x.min(), raw=False)
df['Fib61.8'] = df['Close'].rolling(window=21).apply(lambda x: (x.max() - x.min()) * 0.618 + x.min(), raw=False)

# Adicionando linhas de tendência
df['trendline'] = SLOPE(df, timeperiod=25) * df.index.values + TRENDLINE(df, timeperiod=25)

# Adicionando canais de alta e baixa
df['up_channel'], df['down_channel'] = BBANDS(df, timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)

# Preparando dados para treinamento da rede neural
scaler = MinMaxScaler()
X = scaler.fit_transform(df[["SMA_50", "SMA_200", "log_returns", "high_low_diff", "volume_diff", "volatility", "rsi", "Fib38.2", "Fib50", "Fib61.8", "trendline", "up_channel", "down_channel"]].values)
y = np.where(df["Close"].shift(-1) > df["Close"], 1, 0)

# Definindo modelo de rede neural
model = Sequential()
model.add(Dense(13, input_dim=X.shape[1], activation="relu"))
model.add(Dense(1, activation="sigmoid"))
model.compile(loss="binary_crossentropy", optimizer="adam", metrics=["accuracy"])

# Treinando modelo
model.fit(X[:-1], y[:-1], epochs=50, batch_size=16)

# Avaliando modelo
loss, accuracy = model.evaluate(X[:-1], y[:-1])
print(f"Loss: {loss}")
print(f"Accuracy: {accuracy}")

# Salvando modelo
model_filename = f"{ticker}.h5"
model.save(model_filename)

# Salvando scaler
scaler_filename = f"{ticker}_scaler.pkl"
with open(scaler_filename, "wb") as file:
        pickle.dump(scaler, file)

# Plotando gráfico
plt.figure(figsize=(15, 5))
plt.plot(df["Close"])
plt.plot(df["SMA_50"])
plt.plot(df["SMA_200"])
plt.plot(df["trendline"])
plt.plot(df["up_channel"])
plt.plot(df["down_channel"])
plt.scatter(df[df["direction"] == 1].index, df[df["direction"] == 1]["Close"], color="green")
plt.scatter(df[df["direction"] == 0].index, df[df["direction"] == 0]["Close"], color="red")
plt.title(ticker)
plt.legend(["Close", "SMA_50", "SMA_200", "Trendline", "Up Channel", "Down Channel", "Buy", "Sell"])
plt.show()

# Fazendo previsão para o próximo dia
last_row = X[-1].reshape(1, -1)
predicted_direction = model.predict(last_row)
if predicted_direction > 0.5:
    print("Próximo movimento: Compra")
else:
    print("Próximo movimento: Venda")

# Verificando se já existe um arquivo de previsão
prediction_filename = f"{ticker}_prediction.txt"
if os.path.isfile(prediction_filename):
    with open(prediction_filename, "r") as file:
        previous_prediction = file.read()
if previous_prediction == "Compra" and predicted_direction <= 0.5:
    print("Mudança de tendência detectada!")
elif previous_prediction == "Venda" and predicted_direction > 0.5:
    print("Mudança de tendência detectada!")
else:
    print("Nenhum arquivo de previsão encontrado.")

# Salvando previsão
with open(prediction_filename, "w") as file:
    if predicted_direction > 0.5:
        file.write("Compra")
    else:
        file.write("Venda")
